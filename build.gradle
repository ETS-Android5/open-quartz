buildscript {
    repositories {
//        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        jcenter()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7

        configure(options) {
            compilerArgs << '-Xlint:all' << '-Xlint:-options'
            deprecation = true
            encoding = 'UTF-8'
        }
    }

    tasks.withType(Test) {
        testLogging {
            exceptionFormat 'full'
        }
    }
}

subprojects {
    apply plugin: 'com.android.application'

    android {
        // Make sure we apply the correct tools
        compileSdkVersion project.name.contains('GDK-') ? 'Google Inc.:Glass Development Kit Preview:19' : 22
        buildToolsVersion '22.0.1'

        // Set 'applicationId' in AndroidManifest.xml
        defaultConfig {
            minSdkVersion 19
            targetSdkVersion 22
            versionCode 1
            versionName '1.0'
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        signingConfigs {
            debug {
                storeFile rootProject.file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        lintOptions {
            abortOnError false
        }
    }

    // Running the APK on your Android Device - only works for SDK apps
    android.applicationVariants.all { variant ->
        if (variant.install) {
            tasks.create(name: "run${variant.name.capitalize()}", type: Exec,
                    dependsOn: variant.install) {
                group = 'Run'
                description "Installs and Runs the APK for ${variant.description}."
                def getMainActivity = { file ->
                    new XmlSlurper().parse(file).application.activity.find {
                        it.'intent-filter'.find { filter ->
                            return filter.action.find {
                                it.'@android:name'.text() == 'android.intent.action.MAIN'
                            } \
                             && filter.category.find {
                                it.'@android:name'.text() == 'android.intent.category.LAUNCHER'
                            }
                        }
                    }.'@android:name'
                }
                doFirst {
                    def activityClass =
                            getMainActivity(variant.outputs.processManifest.manifestOutputFile)
                    commandLine android.adbExe, 'shell', 'am', 'start', '-n',
                            "${variant.applicationId}/${activityClass}"

                    // or without the XML hacking: commandLine android.adbExe, 'shell', 'monkey', '-p', variant.applicationId, '1'
                }
            }
        }
    }
}
